// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductManagementTask.Infrastructure.Context;

#nullable disable

namespace ProductManagementTask.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductManagementTask.Domain.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CabinetInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CriticalQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShelfInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockClass")
                        .HasColumnType("int");

                    b.Property<int>("StockTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StockUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockTypeId");

                    b.HasIndex("StockUnitId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("ProductManagementTask.Domain.Entities.StockType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StockTypes");
                });

            modelBuilder.Entity("ProductManagementTask.Domain.Entities.StockUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PaperWeight")
                        .HasColumnType("int");

                    b.Property<int>("QuantityUnit")
                        .HasColumnType("int");

                    b.Property<int>("StockTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockTypeId");

                    b.ToTable("StockUnits");
                });

            modelBuilder.Entity("ProductManagementTask.Domain.Entities.Stock", b =>
                {
                    b.HasOne("ProductManagementTask.Domain.Entities.StockType", "StockType")
                        .WithMany()
                        .HasForeignKey("StockTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProductManagementTask.Domain.Entities.StockUnit", "StockUnit")
                        .WithMany()
                        .HasForeignKey("StockUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockType");

                    b.Navigation("StockUnit");
                });

            modelBuilder.Entity("ProductManagementTask.Domain.Entities.StockUnit", b =>
                {
                    b.HasOne("ProductManagementTask.Domain.Entities.StockType", "StockType")
                        .WithMany()
                        .HasForeignKey("StockTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ProductManagementTask.Domain.ValueObjects.Money", "Buying", b1 =>
                        {
                            b1.Property<int>("StockUnitId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("money")
                                .HasColumnName("BuyingAmount");

                            b1.Property<int>("currency")
                                .HasColumnType("int")
                                .HasColumnName("BuyingCurrency");

                            b1.HasKey("StockUnitId");

                            b1.ToTable("StockUnits");

                            b1.WithOwner()
                                .HasForeignKey("StockUnitId");
                        });

                    b.OwnsOne("ProductManagementTask.Domain.ValueObjects.Money", "Selling", b1 =>
                        {
                            b1.Property<int>("StockUnitId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("money")
                                .HasColumnName("SellingAmount");

                            b1.Property<int>("currency")
                                .HasColumnType("int")
                                .HasColumnName("SellingCurrency");

                            b1.HasKey("StockUnitId");

                            b1.ToTable("StockUnits");

                            b1.WithOwner()
                                .HasForeignKey("StockUnitId");
                        });

                    b.Navigation("Buying")
                        .IsRequired();

                    b.Navigation("Selling")
                        .IsRequired();

                    b.Navigation("StockType");
                });
#pragma warning restore 612, 618
        }
    }
}
